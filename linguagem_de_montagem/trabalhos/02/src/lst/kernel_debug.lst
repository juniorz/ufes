     1                                  ; Segundo Trabalho de Linguagem de Montagem
     2                                  ; Ciência da Computação - 2005/01 - UFES
     3                                  ;
     4                                  ; Autor: Reinaldo Junior < juniorz [at] gmail [dot] com >
     5                                  ; 	 http://www.phpbb.com.br/portal/
     6                                  ; -----------------------------------------------
     7                                  ; Criado em: 15/06/2005
     8                                  ; Versão 1.0
     9                                  ; -----------------------------------------------
    10                                  ; Descrição:
    11                                  ; Esse arquivo contém as funções que definem
    12                                  ; o reconhecimento dos comandos e a entrega do
    13                                  ; controle à função do comando.
    14                                  ; -----------------------------------------------
    15                                  
    16                                  
    17                                  ; -----------------------------------------------
    18                                  ;               .:] Changelog [:.
    19                                  ; -----------------------------------------------
    20                                  ; 17/06/2005 21:01
    21                                  ; Criação do arquivo
    22                                  ; -----------------------------------------------
    23                                  
    24                                  %include "includes/macros.inc"
    25                              <1> ; -----------------------------------------------
    26                              <1> ; Segundo Trabalho de Linguagem de Montagem
    27                              <1> ; Ciência da Computação - 2005/01 - UFES
    28                              <1> ; -----------------------------------------------
    29                              <1> ; Autor: Reinaldo Junior < juniorz [at] gmail [dot] com >
    30                              <1> ; 	 http://www.phpbb.com.br/portal/
    31                              <1> ; -----------------------------------------------
    32                              <1> ; Criado em: 15/06/2005
    33                              <1> ; Versão 0.0.1
    34                              <1> ; -----------------------------------------------
    35                              <1> ; Descrição:
    36                              <1> ; Esse arquivo contem as macros utilizadas no programa
    37                              <1> ; -----------------------------------------------
    38                              <1> 
    39                              <1> ; Constantes
    40                              <1> %define ST_MEM_LIVRE	0
    41                              <1> %define ST_MEM_OCUPADA	1
    42                              <1> 
    43                              <1> ;Status do telefone (marcara)
    44                              <1> ;				xxxx	 	telefone entrou? (possui linha)
    45                              <1> ;				    yyyy 	telefone ocupado? (fora do gancho)
    46                              <1> %define MSK_TEL_OCUPADO		00001111b	; Fora do gancho (nao importa se esta fazendo ou recebendo ligações)
    47                              <1> %define MSK_TEL_LIVRE		00000000b	; No do gancho (automaticamente nao esta fazendo ou recebendo ligacoes)
    48                              <1> %define MSK_TEL_COMUNICACAO	11111111b	; Em comunicação (automaticamente ele esta fora do gancho, pois ao colocar no gancho ele sai da comunicaçao)
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52                              <1> %define ST_TEL_LINHA	11110000b	; Telefone possui linha
    53                              <1> 
    54                              <1> %define MAPA_CADASTRO 0
    55                              <1> %define MAPA_CONVERSA 1
    56                              <1> %define MAPA_MENSAGEM 2
    57                              <1> 
    58                              <1> 
    59                              <1> ; -----------------------------------------------
    60                              <1> ;                .:] Macros [:.
    61                              <1> ; -----------------------------------------------
    62                              <1> 
    63                              <1> ; -----------------------------------------------
    64                              <1> ; [macro] _newline
    65                              <1> ; [descr] imprime um \n
    66                              <1> ; [param] descritor de arquivos destino para o \n
    67                              <1> ; -----------------------------------------------
    68                              <1> %macro	_newline 0-1 1
    69                              <1> 	print_char 0xA, %1
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> 
    73                              <1> ; -----------------------------------------------
    74                              <1> ; [macro] print_char
    75                              <1> ; [descr] imprime um caractere
    76                              <1> ; [param] (1) caractere
    77                              <1> ; 	  (2) descritor de arquivos destino para o caractere
    78                              <1> ; -----------------------------------------------
    79                              <1> %macro	print_char 1-2 1
    80                              <1> 	push 	eax		; eax recebe retorno de print_z
    81                              <1> 	pushfd			; Armazena os flags
    82                              <1> 
    83                              <1> 	push 	dword %1	; buffer
    84                              <1> 	push 	esp		; ptr para o buffer 		(2)
    85                              <1> 	push 	dword %2	; desc de arquivo - stdout 	(1)
    86                              <1> 	call 	print_z
    87                              <1> 	descarta_pilha 3	; Descarta o parametro
    88                              <1> 
    89                              <1> 	popfd			; Restaura os flags
    90                              <1> 	pop	eax		; Restaura eax
    91                              <1> %endmacro
    92                              <1> 
    93                              <1> 
    94                              <1> ; -----------------------------------------------
    95                              <1> ; [macro] print_str
    96                              <1> ; [descr] imprime uma string
    97                              <1> ; [param] (1) ptr para a string (zero-terminated)
    98                              <1> ; 	  (2) descritor de arquivos destino
    99                              <1> ; -----------------------------------------------
   100                              <1> %macro	print_str 1-2 1
   101                              <1> 	push %1
   102                              <1> 	push %2
   103                              <1> 	call print_z
   104                              <1> 	descarta_pilha 2
   105                              <1> %endmacro
   106                              <1> 
   107                              <1> ; -----------------------------------------------
   108                              <1> ; [macro] macro_syscall
   109                              <1> ; [descr] executa uma syscall
   110                              <1> ; [param] (1) numero da syscall
   111                              <1> ; -----------------------------------------------
   112                              <1> %macro	macro_syscall	1
   113                              <1> 	mov eax, dword %1	; Numero da syscall
   114                              <1> 	int 80h			; Chama o kernel
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> 
   118                              <1> ; -----------------------------------------------
   119                              <1> ; [macro] termina_programa
   120                              <1> ; [descr] finaliza o processo
   121                              <1> ; [param] (1) codigo de saida do processo
   122                              <1> ; -----------------------------------------------
   123                              <1> %macro termina_programa 1
   124                              <1> 	mov 	ebx, %1		; codigo de saida
   125                              <1> 	macro_syscall 1		; syscall: exit (kernel/exit.c)
   126                              <1> %endmacro
   127                              <1> 
   128                              <1> 
   129                              <1> ; -----------------------------------------------
   130                              <1> ; [macro] descarta_pilha
   131                              <1> ; [descr] descarta um numero de elementos do topo da pilha
   132                              <1> ; [param] (1) numero de elemntos
   133                              <1> ; -----------------------------------------------
   134                              <1> %macro descarta_pilha 1
   135                              <1> 	add esp, 4 * %1		; Descarta 4 * num_elementos bytes da pilha
   136                              <1> %endmacro
   137                              <1> 
   138                              <1> 
   139                              <1> ; -----------------------------------------------
   140                              <1> ; [macro] ccc_begin
   141                              <1> ; [descr] faz os preparativos iniciais para que um procedimento utilize a convenção de chamada do C
   142                              <1> ; [param] (1) numero de variaveis locais que o proceidmento precisará
   143                              <1> ; -----------------------------------------------
   144                              <1> %macro ccc_begin 0-1 0
   145                              <1> 	push	ebp		; Empilha ebp
   146                              <1> 	mov	ebp, esp	; Prepara a pilha para poder ser utilizada no subprocedimento sem que se perca os parametros
   147                              <1> 	sub	esp, 4 * %1	; Reserva espaço para variaveis locais
   148                              <1> %endmacro
   149                              <1> 
   150                              <1> 
   151                              <1> ; -----------------------------------------------
   152                              <1> ; [macro] ccc_end
   153                              <1> ; [descr] restaura a pilha para o estado inicial da chamada do procedimento
   154                              <1> ; -----------------------------------------------
   155                              <1> %macro ccc_end 0
   156                              <1> 	mov	esp, ebp	; Restaura esp
   157                              <1> 	pop	ebp		; Restaura ebp
   158                              <1> %endmacro
   159                              <1> 
   160                              <1> 
   161                              <1> ; -----------------------------------------------
   162                              <1> ; [macro] parametro
   163                              <1> ; [descr] expande para o endereço de um determinado parametro do procedimento
   164                              <1> ; [param] (1) numero do parametro (contado da esquerda para a direita)
   165                              <1> ; -----------------------------------------------
   166                              <1> %define 	parametro(x)	ebp + 4 + 4 * x
   167                              <1> 
   168                              <1> 
   169                              <1> ; -----------------------------------------------
   170                              <1> ; [macro] varlocal
   171                              <1> ; [descr] expande para o endereço de uma determinada variavel local do procedimento
   172                              <1> ; [param] (1) numero do da variavel local
   173                              <1> ; -----------------------------------------------
   174                              <1> %define 	varlocal(x)	ebp - 4 * x
   175                                  
   176                                  ; Torna disponivel aos outros modulos
   177                                  global processa_arquivo
   178                                  global processa_comando
   179                                  
   180                                  ; [trab2.o]
   181                                  extern s_comando.ptComando
   182                                  extern s_comando.ptFuncao
   183                                  extern fimComandos
   184                                  
   185                                  
   186                                  ;%ifdef DEBUG
   187                                  
   188                                  	%include "util/asm_io.inc"
   189                              <1> 	extern  read_int, print_int, print_string
   190                              <1> 	extern	read_char, print_char, print_nl
   191                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
   192                              <1> 
   193                              <1> %macro 	dump_regs 1
   194                              <1> 	push	  dword %1
   195                              <1> 	call	  sub_dump_regs
   196                              <1> %endmacro
   197                              <1> 
   198                              <1> 
   199                              <1> ;
   200                              <1> ; usage: dump_mem label, start-address, # paragraphs
   201                              <1> %macro  dump_mem 3
   202                              <1> 	push	 dword %1
   203                              <1> 	push	 dword %2
   204                              <1> 	push	 dword %3
   205                              <1> 	call	 sub_dump_mem
   206                              <1> %endmacro
   207                              <1> 
   208                              <1> %macro	dump_math 1
   209                              <1> 	push	 dword %1
   210                              <1> 	call	 sub_dump_math
   211                              <1> %endmacro
   212                              <1> 
   213                              <1> %macro  dump_stack 3
   214                              <1> 	push	 dword %3
   215                              <1>         push     dword %2
   216                              <1> 	push	 dword %1
   217                              <1>         call     sub_dump_stack
   218                              <1> %endmacro
   219                                  	
   220                                  	; [std_io.o]
   221                                  	extern print_z	
   222                                  
   223                                  	section .data
   224                                  		; Mensagem de erro
   225 00000000 436F6D616E646F206E-     		str_erroComando db "Comando não reconhecido em: ", 0x00
   226 00000009 E36F207265636F6E68-
   227 00000012 656369646F20656D3A-
   228 0000001B 2000               
   229                                  ;%endif
   230                                  
   231                                  ; -----------------------------------------------
   232                                  ; [nome]  	processa_arquivo
   233                                  ; [descr] 	processa as linhas de um arquivo
   234                                  ; [param] 	descritor do arquivo a processar		(1)
   235                                  ; 		ptr para a funcao que processa cada linha	(2)
   236                                  ;		ptr para os parametros passados a 2		(3)
   237                                  ; -----------------------------------------------
   238                                  ; CHANGELOG
   239                                  ; -----------------------------------------------
   240                                  ; [17/06/2005 - 02:15]
   241                                  ; Finaliza a versão 1.0 da função
   242                                  ;
   243                                  ; [17/06/2005 - 03:21]
   244                                  ; Versão 1.1
   245                                  ; Foi adicionado os tratamentos para o caso do buffer estourar
   246                                  ; (adotando o descarte de todo o restante do comando). Solucionado também o problema do ultimo 
   247                                  ; comando nao estar sinalizado com um 0x00
   248                                  ;
   249                                  ; [30/06/2005 - 22:22]
   250                                  ; versão 1.2
   251                                  ; Corrigido problema com o ultimo comando do arquivo. Nao estava inserindo o 0x00 corretamente caso o buffer nao esivesse estourado.
   252                                  ; -----------------------------------------------
   253                                  processa_arquivo:
   254                                  	ccc_begin 3				; Prepara o ambiente - 3 variaveis locais
   255 0000001D 55                  <1>  push ebp
   256 0000001E 89E5                <1>  mov ebp, esp
   257 00000020 81EC0C000000        <1>  sub esp, 4 * %1
   258                                  
   259                                  	; Reserva espaço na pilha criando um buffer para a leitura das linhas do arquivo
   260                                  	; Nesse ponto do trabalho eu descobri o poder da pilha (e comecei a me empolgar com a coisa, decidindo nao fazer NADA em C) ;-)
   261 00000026 8965F8                  	mov	[varlocal(2)], dword esp	; Armazena os limites do buffer | varlocal(2) = fimBuffer
   262 00000029 81EC80000000            	sub	esp, 128			; 128 bytes
   263                                  
   264 0000002F 51                      	push 	ecx				; Armazena ecx
   265 00000030 89E1                    	mov	ecx, dword esp			; ptr para o buffer
   266 00000032 81E904000000            	sub	ecx, 4				; Aponta para a posicao correta
   267 00000038 894DFC                  	mov	[varlocal(1)], ecx		; Aponta para o inicio do buffer também (fixo)
   268                                  
   269 0000003B 50                      	push	eax				; Amazena os registradores
   270 0000003C 53                      	push	ebx
   271 0000003D 52                      	push	edx
   272                                  
   273                                  	;
   274                                  	; Agora possuo um buffer para jogar as linhas do arquivo
   275                                  	;
   276                                  
   277                                  	; Inicializa variaveis
   278 0000003E 8B5D08                  	mov	ebx, [parametro(1)]		; Descritor do arquivo
   279 00000041 BA01000000              	mov	edx, 1				; ler 1 byte
   280                                  
   281                                  
   282                                    .le_linha
   283                                  
   284 00000046 C745F400000000          	mov	[varlocal(3)], dword 0x00	; reseta o ptr para os parametros do comando
   285                                  
   286                                  	
   287                                    .ler_byte
   288                                  
   289                                  	; Le byte a byte
   290                                  	macro_syscall 3
   291 0000004D B803000000          <1>  mov eax, dword %1
   292 00000052 CD80                <1>  int 80h
   293                                  
   294                                  	; Leu algum byte (chegou ao fim do arquivo) ?
   295 00000054 3D00000000              	cmp	eax, 0x00;
   296 00000059 7423                    	je	.fim_arquivo
   297                                  
   298 0000005B 41                      	inc	ecx				; Apota para a proxima posicao no buffer
   299                                  
   300                                  	; Verifica espaço
   301 0000005C 8079FF20                	cmp	byte [ecx - 1], ' '		; Achou espaço (32), então já possui o comando
   302 00000060 750C                    	jne	.nao_espaco
   303                                  
   304                                  	; Se encontrou um espaço, armazena a posição da string de parametros
   305 00000062 817DF400000000          	cmp	[varlocal(3)], dword 0x00	; Ja havia armazenado ?
   306 00000069 7503                    	jne	.nao_espaco
   307 0000006B 894DF4                  	mov 	[varlocal(3)], dword ecx	; Armazena o endereco atual
   308                                  
   309                                  
   310                                    .nao_espaco
   311                                  
   312                                  	; Caracter que nao é espaço
   313 0000006E 8079FF0A                	cmp	byte [ecx - 1], 0xA		; Chegou ao final da linha ?
   314 00000072 743D                    	je	.fim_linha			; Continua lendo se nao chegou ao fim da linha
   315                                  
   316                                  	; Verifica se o buffer esta cheio
   317 00000074 394DF8                  	cmp	[varlocal(2)], ecx		; ecx chegou ao fim do buffer ?
   318 00000077 75D4                    	jne	.ler_byte			; Nao
   319 00000079 E90E000000              	jmp	.buffer_cheio			; Sim
   320                                  
   321                                  
   322                                    .fim_arquivo
   323                                  
   324                                  	; Chegou ao fim do arquivo, precisa verificar se o buffer esta cheio para poder saber onde gravar o 0x0
   325 0000007E 394DF8                  	cmp	[varlocal(2)], ecx		; ecx chegou ao fim do buffer ?
   326 00000081 742E                    	je	.fim_linha			; Sim | Substitui o ultimo caractere lido por um 0x0h (fazer o que né, antes perder 1 caractere do que estragar meu trabalho)
   327 00000083 C6410100                	mov	byte [ecx + 1], 0x0		; Coloca o 0x0h no proximo caractere do buffer (já que tem espaço..)
   328 00000087 E929000000              	jmp	.processa			; Processa o comando
   329                                  
   330                                  
   331                                    .buffer_cheio
   332                                  
   333                                  	; Descarta o restante da linha
   334 0000008C 50                      	push	eax
   335 0000008D 51                      	push	ecx
   336 0000008E 4C                      	dec	esp				; Reserva mais espaço da pilha para um lixinho (1 byte)
   337                                  
   338                                  
   339                                      .descarta
   340                                  
   341                                  	; Le byte a byte
   342 0000008F 89E1                    	mov	ecx,	esp
   343                                  	macro_syscall 3
   344 00000091 B803000000          <1>  mov eax, dword %1
   345 00000096 CD80                <1>  int 80h
   346                                  
   347 00000098 3D00000000              	cmp	eax, 0x00			; Se nao leu nada chegou ao final do arquivo (a ultima linah era grande demais)
   348 0000009D 7509                    	jne	.verifica_newline		; Leu alguma coisa, verifica se eh um newline
   349 0000009F 89442405                	mov	[esp + 5], eax			; sobreescreve o velho eax
   350 000000A3 E906000000              	jmp	.termina_cerificacao		; ira substituir a ultima letra por 0x00, mas está certo pois o buffer jah tinah acabado mesmo
   351                                  
   352                                      .verifica_newline
   353 000000A8 803C240A                	cmp	byte [esp], 0xA			; Verifica se o caractere é um newline
   354 000000AC 75E1                    	jne	.descarta			; Continua descartando enquanto nao for \n ou fim do arquivo
   355                                  
   356                                  
   357                                      .termina_cerificacao
   358                                  
   359                                  	; Terminou a verificacao
   360 000000AE 44                      	inc 	esp				; Restaura a pilha
   361 000000AF 59                      	pop	ecx
   362 000000B0 58                      	pop	eax
   363                                  
   364                                  
   365                                    .fim_linha
   366                                  
   367                                  	; Encontrou um \n
   368 000000B1 C641FF00                	mov	[ecx - 1], byte 0x0		; Substitui o \n por um Zero (torna o parametro imprimivel pelas funcoes padrao)
   369                                  
   370                                  
   371                                    .processa
   372                                  
   373                                  dump_regs 65432
   374 000000B5 6898FF0000          <1>  push dword %1
   375 000000BA E8(00000000)        <1>  call sub_dump_regs
   376                                  dump_mem 65432, ecx, 2
   377 000000BF 6898FF0000          <1>  push dword %1
   378 000000C4 51                  <1>  push dword %2
   379 000000C5 6802000000          <1>  push dword %3
   380 000000CA E8(00000000)        <1>  call sub_dump_mem
   381                                  
   382                                  	; Trata o caso de o comando nao possuir parametros
   383 000000CF 817DF400000000          	cmp	[varlocal(3)], dword 0x00	; comando sem parametro
   384 000000D6 7503                    	jne	.processa_mesmo
   385 000000D8 894DF4                  	mov 	[varlocal(3)], dword ecx	; Armazena o endereco atual
   386                                  
   387                                    .processa_mesmo
   388                                  
   389                                  	; Processa o comando
   390 000000DB 9C                      	pushfd	
   391 000000DC FF7510                  	push	dword [parametro(3)]		; parametro pra essa funcao 		(3)
   392 000000DF FF75F4                  	push	dword [varlocal(3)]		; ptr para os parametros		(2)
   393 000000E2 FF75FC                  	push 	dword [varlocal(1)]		; ptr para a string de comando 		(1) | inicio do buffer
   394 000000E5 FF550C                  	call	dword [parametro(2)]		; chama a funcao definida | processa_comando
   395                                  	descarta_pilha 3
   396 000000E8 81C40C000000        <1>  add esp, 4 * %1
   397 000000EE 9D                      	popfd
   398                                  
   399                                  	; Restaura o buffer
   400 000000EF 3D00000000              	cmp	eax, 0x00			; Chegou aqui sem ler nenhum byte ??
   401 000000F4 7408                    	je	.fim				; Então  oarquivo acabou e deve terminar a leitura
   402                                  
   403 000000F6 8B4DFC                  	mov	ecx, [varlocal(1)]		; Senão, Restaura o buffer
   404 000000F9 E948FFFFFF              	jmp	.le_linha			; E lê a proxima linha
   405                                  
   406                                    .fim
   407                                  
   408 000000FE 5A                      	pop	edx				; Restaura os registradores
   409 000000FF 5B                      	pop	ebx
   410 00000100 58                      	pop	eax
   411 00000101 59                      	pop	ecx
   412                                  	ccc_end					; Restaura o ambiente
   413 00000102 89EC                <1>  mov esp, ebp
   414 00000104 5D                  <1>  pop ebp
   415 00000105 C3                      ret
   416                                  
   417                                  
   418                                  
   419                                  ; -----------------------------------------------
   420                                  ; [nome]  	processa_comando
   421                                  ; [descr] 	Procesa o comando de uma linha do arquivo
   422                                  ; [param] 	ptr para a string de comando 	(1)
   423                                  ;		ptr para os parametros		(2)
   424                                  ;		ptr para a tabela de comandos	(3)
   425                                  ; [return]	numero de bytes lidos como parametros do comando (eax)
   426                                  ; -----------------------------------------------
   427                                  ; 17/06/2005 02:34
   428                                  ; Finaliza a versão 0.9 da função
   429                                  ;
   430                                  ; 17/06/2005 20:43
   431                                  ; Finalizada a versão 1.0. A função já passa o controle ao manipulador do comando.
   432                                  ; Falta agora apenas implementar os comandos ;-p (que é a parte fácil do trabalho hehe)
   433                                  ; -----------------------------------------------
   434                                  processa_comando:
   435                                  	ccc_begin			; Prepara o ambiente
   436 00000106 55                  <1>  push ebp
   437 00000107 89E5                <1>  mov ebp, esp
   438 00000109 81EC00000000        <1>  sub esp, 4 * %1
   439 0000010F 50                      	push 	eax			; Armazena os registradores
   440 00000110 53                      	push	ebx
   441 00000111 51                      	push	ecx
   442                                  
   443                                  
   444                                  	;ebx armazenara o tamanho do comando
   445 00000112 8B5D0C                  	mov	ebx, dword [parametro(2)]
   446 00000115 2B5D08                  	sub	ebx, dword [parametro(1)]
   447 00000118 4B                      	dec	ebx
   448                                  
   449 00000119 8B4D10                  	mov	ecx, dword [parametro(3)]		; ecx armazena o comando sendo comparado atualmente
   450                                  
   451 0000011C FC                      	cld	; limpa o flag de direcao
   452                                  
   453                                  
   454                                    .compara_comando
   455                                  
   456                                  	;ecx aponta para o elemento atual na TABELA de comandos
   457                                  
   458 0000011D 8B7508                  	mov	esi, dword [parametro(1)]		; aponta esi para a string a ser processada
   459 00000120 8B39                    	mov 	edi, [ecx]				; aponta edi para o comando atual
   460 00000122 8BBF[00000000]          	mov	edi, [edi + s_comando.ptComando]	; aponta edi para a string do comando atual
   461                                  
   462 00000128 51                      	push	ecx					; armazena o comando atual a ser comparado
   463                                  
   464                                  	;
   465                                  	; Compara enquanto for igual
   466                                  	;
   467 00000129 89D9                    	mov	ecx, ebx				; numero de caracteres a comparar
   468 0000012B F3A6                    	repe	cmpsb					; compara enquanto as strings coincidirem E enquanto houver algum caractere a comparar (ecx > 0)
   469                                  
   470 0000012D 59                      	pop	ecx					; ecx aponta novamente para o comando que foi comparado
   471                                  
   472 0000012E 7459                    	je	.processa				; os comandos coincidem
   473                                  
   474                                  	;
   475                                  	; Comando atual nao coincidiu
   476                                  	;
   477                                  
   478 00000130 81F9[00000000]          	cmp	ecx, fimComandos			; Chegou ao ultimo comando a comparar?
   479                                  %ifdef DEBUG
   480 00000136 7408                    	je 	.erro_comando				; Erro no comando
   481                                  %else
   482                                  	je 	.termina				; Terminou o processamento
   483                                  %endif
   484                                  
   485 00000138 81C104000000            	add 	ecx, 4					; Aponta para o proximo comando
   486 0000013E EBDD                    	jmp	.compara_comando			; Compara com o proximo comando da tabela
   487                                  
   488                                  
   489                                  %ifdef DEBUG
   490                                    .erro_comando	
   491                                  
   492                                  	; Exibe o ero de comando nao reconhecido
   493 00000140 50                      	push eax					; print_z retorna o numer ode bytes escritos
   494                                  
   495                                  	print_str dword str_erroComando, 2		; mensagem de erro
   496 00000141 68[00000000]        <1>  push %1
   497 00000146 6802000000          <1>  push %2
   498 0000014B E8(00000000)        <1>  call print_z
   499                              <1>  descarta_pilha 2
   500 00000150 81C408000000        <2>  add esp, 4 * %1
   501                                  	print_str dword [parametro(1)], 2		; string do comando
   502 00000156 FF7508              <1>  push %1
   503 00000159 6802000000          <1>  push %2
   504 0000015E E8(00000000)        <1>  call print_z
   505                              <1>  descarta_pilha 2
   506 00000163 81C408000000        <2>  add esp, 4 * %1
   507                                  	_newline 2					; Nova linha
   508                              <1>  print_char 0xA, %1
   509 00000169 50                  <2>  push eax
   510 0000016A 9C                  <2>  pushfd
   511                              <2> 
   512 0000016B 680A000000          <2>  push dword %1
   513 00000170 54                  <2>  push esp
   514 00000171 6802000000          <2>  push dword %2
   515 00000176 E8(00000000)        <2>  call print_z
   516                              <2>  descarta_pilha 3
   517 0000017B 81C40C000000        <3>  add esp, 4 * %1
   518                              <2> 
   519 00000181 9D                  <2>  popfd
   520 00000182 58                  <2>  pop eax
   521                                  
   522 00000183 58                      	pop eax						; Restaura
   523                                  
   524 00000184 E911000000              	jmp	.termina
   525                                  %endif
   526                                  
   527                                  
   528                                    .processa
   529                                  
   530                                  	; Chama a funcao adequada para o comando encontrado
   531 00000189 8B09                    	mov 	ecx, [ecx]				; Aponta ecx para o comando atual
   532 0000018B FF750C                  	push	dword [parametro(2)]			; (1) ptr para string do comando
   533 0000018E FF91[00000000]          	call	dword [ecx + s_comando.ptFuncao]	; Chama a funcao
   534                                  	descarta_pilha 1
   535 00000194 81C404000000        <1>  add esp, 4 * %1
   536                                  
   537                                  
   538                                    .termina
   539                                  
   540                                  	; Termina o algoritmo  
   541 0000019A 59                      	pop 	ecx					; Restaura os registradores
   542 0000019B 5B                      	pop	ebx
   543 0000019C 58                      	pop 	eax
   544                                  	ccc_end						; Restaura o ambiente
   545 0000019D 89EC                <1>  mov esp, ebp
   546 0000019F 5D                  <1>  pop ebp
   547 000001A0 C3                      ret
