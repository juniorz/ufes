     1                                  ;
     2                                  ; file: asm_io.asm
     3                                  ; Assembly I/O routines
     4                                  ; To assemble for DJGPP
     5                                  ;   nasm -f coff -d COFF_TYPE asm_io.asm
     6                                  ; To assemble for Borland C++ 5.x
     7                                  ;   nasm -f obj -d OBJ_TYPE asm_io.asm
     8                                  ; To assemble for Microsoft Visual Studio
     9                                  ;   nasm -f win32 -d COFF_TYPE asm_io.asm
    10                                  ; To assemble for Linux
    11                                  ;   nasm -f elf -d ELF_TYPE asm_io.asm
    12                                  ; To assemble for Watcom
    13                                  ;   nasm -f obj -d OBJ_TYPE -d WATCOM asm_io.asm
    14                                  ; IMPORTANT NOTES FOR WATCOM
    15                                  ;   The Watcom compiler's C library does not use the
    16                                  ;   standard C calling convention. For example, the
    17                                  ;   putchar() function gets its argument from the
    18                                  ;   the value of EAX, not the stack.
    19                                  
    20                                  
    21                                  %define NL 10
    22                                  %define CF_MASK 00000001h
    23                                  %define PF_MASK 00000004h
    24                                  %define AF_MASK 00000010h
    25                                  %define ZF_MASK 00000040h
    26                                  %define SF_MASK 00000080h
    27                                  %define DF_MASK 00000400h
    28                                  %define OF_MASK 00000800h
    29                                  
    30                                  
    31                                  ;
    32                                  ; Linux C doesn't put underscores on labels
    33                                  ;
    34                                  %ifdef ELF_TYPE
    35                                    %define _scanf   scanf
    36                                    %define _printf  printf
    37                                    %define _getchar getchar
    38                                    %define _putchar putchar
    39                                  %endif
    40                                  
    41                                  ;
    42                                  ; Watcom puts underscores at end of label
    43                                  ;
    44                                  %ifdef WATCOM
    45                                    %define _scanf   scanf_
    46                                    %define _printf  printf_
    47                                    %define _getchar getchar_
    48                                    %define _putchar putchar_
    49                                  %endif
    50                                  
    51                                  %ifdef OBJ_TYPE
    52                                  segment .data public align=4 class=data use32
    53                                  %else
    54                                  segment .data
    55                                  %endif
    56                                  
    57 00000000 256900                  int_format	    db  "%i", 0
    58 00000003 257300                  string_format       db  "%s", 0
    59 00000006 526567697374657220-     reg_format	    db  "Register Dump # %d", NL
    60 0000000F 44756D702023202564-
    61 00000018 0A                 
    62 00000019 454158203D20252E38-     		    db  "EAX = %.8X EBX = %.8X ECX = %.8X EDX = %.8X", NL
    63 00000022 5820454258203D2025-
    64 0000002B 2E385820454358203D-
    65 00000034 20252E385820454458-
    66 0000003D 203D20252E38580A   
    67 00000045 455349203D20252E38-                         db  "ESI = %.8X EDI = %.8X EBP = %.8X ESP = %.8X", NL
    68 0000004E 5820454449203D2025-
    69 00000057 2E385820454250203D-
    70 00000060 20252E385820455350-
    71 00000069 203D20252E38580A   
    72 00000071 454950203D20252E38-                         db  "EIP = %.8X FLAGS = %.4X %s %s %s %s %s %s %s", NL
    73 0000007A 5820464C414753203D-
    74 00000083 20252E345820257320-
    75 0000008C 257320257320257320-
    76 00000095 25732025732025730A 
    77 0000009E 00                      	            db  0
    78 0000009F 434600                  carry_flag	    db  "CF", 0
    79 000000A2 5A4600                  zero_flag	    db  "ZF", 0
    80 000000A5 534600                  sign_flag	    db  "SF", 0
    81 000000A8 504600                  parity_flag	    db	"PF", 0
    82 000000AB 4F4600                  overflow_flag	    db	"OF", 0
    83 000000AE 444600                  dir_flag	    db	"DF", 0
    84 000000B1 414600                  aux_carry_flag	    db	"AF", 0
    85 000000B4 202000                  unset_flag	    db	"  ", 0
    86 000000B7 4D656D6F7279204475-     mem_format1         db  "Memory Dump # %d Address = %.8X", NL, 0
    87 000000C0 6D7020232025642041-
    88 000000C9 646472657373203D20-
    89 000000D2 252E38580A00       
    90 000000D8 252E38582000            mem_format2         db  "%.8X ", 0
    91 000000DE 252E32582000            mem_format3         db  "%.2X ", 0
    92 000000E4 537461636B2044756D-     stack_format        db  "Stack Dump # %d", NL
    93 000000ED 7020232025640A     
    94 000000F4 454250203D20252E38-     	            db  "EBP = %.8X ESP = %.8X", NL, 0
    95 000000FD 5820455350203D2025-
    96 00000106 2E38580A00         
    97 0000010B 252B34642020252E38-     stack_line_format   db  "%+4d  %.8X  %.8X", NL, 0
    98 00000114 582020252E38580A00 
    99 0000011D 4D61746820436F7072-     math_format1        db  "Math Coprocessor Dump # %d Control Word = %.4X"
   100 00000126 6F636573736F722044-
   101 0000012F 756D70202320256420-
   102 00000138 436F6E74726F6C2057-
   103 00000141 6F7264203D20252E34-
   104 0000014A 58                 
   105 0000014B 205374617475732057-                         db  " Status Word = %.4X", NL, 0
   106 00000154 6F7264203D20252E34-
   107 0000015D 580A00             
   108 00000160 535425643A20252E31-     valid_st_format     db  "ST%d: %.10g", NL, 0
   109 00000169 30670A00           
   110 0000016D 535425643A20496E76-     invalid_st_format   db  "ST%d: Invalid ST", NL, 0
   111 00000176 616C69642053540A00 
   112 0000017F 535425643A20456D70-     empty_st_format     db  "ST%d: Empty", NL, 0
   113 00000188 74790A00           
   114                                  
   115                                  ;
   116                                  ; code is put in the _TEXT segment
   117                                  ;
   118                                  %ifdef OBJ_TYPE
   119                                  segment text public align=1 class=code use32
   120                                  %else
   121                                  segment .text
   122                                  %endif
   123                                  	global	read_int, print_int, print_string, read_char
   124                                  	global  print_char, print_nl, sub_dump_regs, sub_dump_mem
   125                                          global  sub_dump_math, sub_dump_stack
   126                                          extern  _scanf, _printf, _getchar, _putchar
   127                                  
   128                                  read_int:
   129 00000000 C8040000                	enter	4,0
   130 00000004 60                      	pusha
   131 00000005 9C                      	pushf
   132                                  
   133 00000006 8D45FC                  	lea	eax, [ebp-4]
   134 00000009 50                      	push	eax
   135 0000000A 68[00000000]            	push	dword int_format
   136 0000000F E8(00000000)            	call	_scanf
   137 00000014 59                      	pop	ecx
   138 00000015 59                      	pop	ecx
   139                                  	
   140 00000016 9D                      	popf
   141 00000017 61                      	popa
   142 00000018 8B45FC                  	mov	eax, [ebp-4]
   143 0000001B C9                      	leave
   144 0000001C C3                      	ret
   145                                  
   146                                  print_int:
   147 0000001D C8000000                	enter	0,0
   148 00000021 60                      	pusha
   149 00000022 9C                      	pushf
   150                                  
   151 00000023 50                      	push	eax
   152 00000024 68[00000000]            	push	dword int_format
   153 00000029 E8(00000000)            	call	_printf
   154 0000002E 59                      	pop	ecx
   155 0000002F 59                      	pop	ecx
   156                                  
   157 00000030 9D                      	popf
   158 00000031 61                      	popa
   159 00000032 C9                      	leave
   160 00000033 C3                      	ret
   161                                  
   162                                  print_string:
   163 00000034 C8000000                	enter	0,0
   164 00000038 60                      	pusha
   165 00000039 9C                      	pushf
   166                                  
   167 0000003A 50                      	push	eax
   168 0000003B 68[03000000]            	push    dword string_format
   169 00000040 E8(00000000)            	call	_printf
   170 00000045 59                      	pop	ecx
   171 00000046 59                      	pop	ecx
   172                                  
   173 00000047 9D                      	popf
   174 00000048 61                      	popa
   175 00000049 C9                      	leave
   176 0000004A C3                      	ret
   177                                  
   178                                  read_char:
   179 0000004B C8040000                	enter	4,0
   180 0000004F 60                      	pusha
   181 00000050 9C                      	pushf
   182                                  
   183 00000051 E8(00000000)            	call	_getchar
   184 00000056 8945FC                  	mov	[ebp-4], eax
   185                                  
   186 00000059 9D                      	popf
   187 0000005A 61                      	popa
   188 0000005B 8B45FC                  	mov	eax, [ebp-4]
   189 0000005E C9                      	leave
   190 0000005F C3                      	ret
   191                                  
   192                                  print_char:
   193 00000060 C8000000                	enter	0,0
   194 00000064 60                      	pusha
   195 00000065 9C                      	pushf
   196                                  
   197                                  %ifndef WATCOM
   198 00000066 50                      	push	eax
   199                                  %endif
   200 00000067 E8(00000000)            	call	_putchar
   201                                  %ifndef WATCOM
   202 0000006C 59                      	pop	ecx
   203                                  %endif
   204                                  
   205 0000006D 9D                      	popf
   206 0000006E 61                      	popa
   207 0000006F C9                      	leave
   208 00000070 C3                      	ret
   209                                  
   210                                  
   211                                  print_nl:
   212 00000071 C8000000                	enter	0,0
   213 00000075 60                      	pusha
   214 00000076 9C                      	pushf
   215                                  
   216                                  %ifdef WATCOM
   217                                  	mov	eax, 10		; WATCOM doesn't use the stack here
   218                                  %else
   219 00000077 680A000000              	push	dword 10	; 10 == ASCII code for \n
   220                                  %endif
   221 0000007C E8(00000000)            	call	_putchar
   222                                  %ifndef WATCOM
   223 00000081 59                      	pop	ecx
   224                                  %endif
   225 00000082 9D                      	popf
   226 00000083 61                      	popa
   227 00000084 C9                      	leave
   228 00000085 C3                      	ret
   229                                  
   230                                  
   231                                  sub_dump_regs:
   232 00000086 C8040000                	enter   4,0
   233 0000008A 60                      	pusha
   234 0000008B 9C                      	pushf
   235 0000008C 8B0424                  	mov     eax, [esp]      ; read FLAGS back off stack
   236 0000008F 8945FC                  	mov	[ebp-4], eax    ; save flags
   237                                  
   238                                  ;
   239                                  ; show which FLAGS are set
   240                                  ;
   241 00000092 A901000000              	test	eax, CF_MASK
   242 00000097 7407                    	jz	cf_off
   243 00000099 B8[9F000000]            	mov	eax, carry_flag
   244 0000009E EB05                    	jmp	short push_cf
   245                                  cf_off:
   246 000000A0 B8[B4000000]            	mov	eax, unset_flag
   247                                  push_cf:
   248 000000A5 50                      	push	eax
   249                                  
   250 000000A6 F745FC04000000          	test	dword [ebp-4], PF_MASK
   251 000000AD 7407                    	jz	pf_off
   252 000000AF B8[A8000000]            	mov	eax, parity_flag
   253 000000B4 EB05                    	jmp	short push_pf
   254                                  pf_off:
   255 000000B6 B8[B4000000]            	mov	eax, unset_flag
   256                                  push_pf:
   257 000000BB 50                      	push	eax
   258                                  
   259 000000BC F745FC10000000          	test	dword [ebp-4], AF_MASK
   260 000000C3 7407                    	jz	af_off
   261 000000C5 B8[B1000000]            	mov	eax, aux_carry_flag
   262 000000CA EB05                    	jmp	short push_af
   263                                  af_off:
   264 000000CC B8[B4000000]            	mov	eax, unset_flag
   265                                  push_af:
   266 000000D1 50                      	push	eax
   267                                  
   268 000000D2 F745FC40000000          	test	dword [ebp-4], ZF_MASK
   269 000000D9 7407                    	jz	zf_off
   270 000000DB B8[A2000000]            	mov	eax, zero_flag
   271 000000E0 EB05                    	jmp	short push_zf
   272                                  zf_off:
   273 000000E2 B8[B4000000]            	mov	eax, unset_flag
   274                                  push_zf:
   275 000000E7 50                      	push	eax
   276                                  
   277 000000E8 F745FC80000000          	test	dword [ebp-4], SF_MASK
   278 000000EF 7407                    	jz	sf_off
   279 000000F1 B8[A5000000]            	mov	eax, sign_flag
   280 000000F6 EB05                    	jmp	short push_sf
   281                                  sf_off:
   282 000000F8 B8[B4000000]            	mov	eax, unset_flag
   283                                  push_sf:
   284 000000FD 50                      	push	eax
   285                                  
   286 000000FE F745FC00040000          	test	dword [ebp-4], DF_MASK
   287 00000105 7407                    	jz	df_off
   288 00000107 B8[AE000000]            	mov	eax, dir_flag
   289 0000010C EB05                    	jmp	short push_df
   290                                  df_off:
   291 0000010E B8[B4000000]            	mov	eax, unset_flag
   292                                  push_df:
   293 00000113 50                      	push	eax
   294                                  
   295 00000114 F745FC00080000          	test	dword [ebp-4], OF_MASK
   296 0000011B 7407                    	jz	of_off
   297 0000011D B8[AB000000]            	mov	eax, overflow_flag
   298 00000122 EB05                    	jmp	short push_of
   299                                  of_off:
   300 00000124 B8[B4000000]            	mov	eax, unset_flag
   301                                  push_of:
   302 00000129 50                      	push	eax
   303                                  
   304 0000012A FF75FC                  	push    dword [ebp-4]   ; FLAGS
   305 0000012D 8B4504                  	mov	eax, [ebp+4]
   306 00000130 2D0A000000              	sub	eax, 10         ; EIP on stack is 10 bytes ahead of orig
   307 00000135 50                      	push	eax             ; EIP
   308 00000136 8D450C                  	lea     eax, [ebp+12]
   309 00000139 50                      	push    eax             ; original ESP
   310 0000013A FF7500                  	push    dword [ebp]     ; original EBP
   311 0000013D 57                              push    edi
   312 0000013E 56                              push    esi
   313 0000013F 52                      	push    edx
   314 00000140 51                      	push	ecx
   315 00000141 53                      	push	ebx
   316 00000142 FF75F8                  	push	dword [ebp-8]   ; original EAX
   317 00000145 FF7508                  	push	dword [ebp+8]   ; # of dump
   318 00000148 68[06000000]            	push	dword reg_format
   319 0000014D E8(00000000)            	call	_printf
   320 00000152 81C44C000000            	add	esp, 76
   321 00000158 9D                      	popf
   322 00000159 61                      	popa
   323 0000015A C9                      	leave
   324 0000015B C20400                  	ret     4
   325                                  
   326                                  sub_dump_stack:
   327 0000015E C8000000                	enter   0,0
   328 00000162 60                      	pusha
   329 00000163 9C                      	pushf
   330                                  
   331 00000164 8D4514                  	lea     eax, [ebp+20]
   332 00000167 50                      	push    eax             ; original ESP
   333 00000168 FF7500                  	push    dword [ebp]     ; original EBP
   334 0000016B FF7508                  	push	dword [ebp+8]   ; # of dump
   335 0000016E 68[E4000000]            	push	dword stack_format
   336 00000173 E8(00000000)            	call	_printf
   337 00000178 81C410000000            	add	esp, 16
   338                                  
   339 0000017E 8B5D00                  	mov	ebx, [ebp]	; ebx = original ebp
   340 00000181 8B4510                  	mov	eax, [ebp+16]   ; eax = # dwords above ebp
   341 00000184 C1E002                  	shl	eax, 2          ; eax *= 4
   342 00000187 01C3                    	add	ebx, eax	; ebx = & highest dword in stack to display
   343 00000189 8B5510                  	mov	edx, [ebp+16]
   344 0000018C 89D1                    	mov	ecx, edx
   345 0000018E 034D0C                  	add	ecx, [ebp+12]
   346 00000191 41                      	inc	ecx		; ecx = # of dwords to display
   347                                  
   348                                  stack_line_loop:
   349 00000192 52                      	push	edx
   350 00000193 51                      	push	ecx		; save ecx & edx
   351                                  
   352 00000194 FF33                    	push	dword [ebx]	; value on stack
   353 00000196 53                      	push	ebx		; address of value on stack
   354 00000197 89D0                    	mov	eax, edx
   355 00000199 C1E002                  	sal	eax, 2		; eax = 4*edx
   356 0000019C 50                      	push	eax		; offset from ebp
   357 0000019D 68[0B010000]            	push	dword stack_line_format
   358 000001A2 E8(00000000)            	call	_printf
   359 000001A7 81C410000000            	add	esp, 16
   360                                  
   361 000001AD 59                      	pop	ecx
   362 000001AE 5A                      	pop	edx
   363                                  
   364 000001AF 81EB04000000            	sub	ebx, 4
   365 000001B5 4A                      	dec	edx
   366 000001B6 E2DA                    	loop	stack_line_loop
   367                                  
   368 000001B8 9D                      	popf
   369 000001B9 61                      	popa
   370 000001BA C9                      	leave
   371 000001BB C20C00                  	ret     12
   372                                  
   373                                  
   374                                  sub_dump_mem:
   375 000001BE C8000000                	enter	0,0
   376 000001C2 60                      	pusha
   377 000001C3 9C                      	pushf
   378                                  
   379 000001C4 FF750C                  	push	dword [ebp+12]
   380 000001C7 FF7510                  	push	dword [ebp+16]
   381 000001CA 68[B7000000]            	push	dword mem_format1
   382 000001CF E8(00000000)            	call	_printf
   383 000001D4 81C40C000000            	add	esp, 12		
   384 000001DA 8B750C                  	mov	esi, [ebp+12]      ; address
   385 000001DD 81E6F0FFFFFF            	and	esi, 0FFFFFFF0h    ; move to start of paragraph
   386 000001E3 8B4D08                  	mov	ecx, [ebp+8]
   387 000001E6 41                      	inc	ecx
   388                                  mem_outer_loop:
   389 000001E7 51                      	push	ecx
   390 000001E8 56                      	push	esi
   391 000001E9 68[D8000000]            	push	dword mem_format2
   392 000001EE E8(00000000)            	call	_printf
   393 000001F3 81C408000000            	add	esp, 8
   394                                  
   395 000001F9 31DB                    	xor	ebx, ebx
   396                                  mem_hex_loop:
   397 000001FB 31C0                    	xor	eax, eax
   398 000001FD 8A041E                  	mov	al, [esi + ebx]
   399 00000200 50                      	push	eax
   400 00000201 68[DE000000]            	push	dword mem_format3
   401 00000206 E8(00000000)            	call	_printf
   402 0000020B 81C408000000            	add	esp, 8
   403 00000211 43                      	inc	ebx
   404 00000212 81FB10000000            	cmp	ebx, 16
   405 00000218 7CE1                    	jl	mem_hex_loop
   406                                  	
   407 0000021A B822000000              	mov	eax, '"'
   408 0000021F E83CFEFFFF              	call	print_char
   409 00000224 31DB                    	xor	ebx, ebx
   410                                  mem_char_loop:
   411 00000226 31C0                    	xor	eax, eax
   412 00000228 8A041E                  	mov	al, [esi+ebx]
   413 0000022B 3C20                    	cmp	al, 32
   414 0000022D 7C06                    	jl	non_printable
   415 0000022F 3C7E                    	cmp	al, 126
   416 00000231 7F02                    	jg	non_printable
   417 00000233 EB05                    	jmp	short mem_char_loop_continue
   418                                  non_printable:
   419 00000235 B83F000000              	mov	eax, '?'
   420                                  mem_char_loop_continue:
   421 0000023A E821FEFFFF              	call	print_char
   422                                  
   423 0000023F 43                      	inc	ebx
   424 00000240 81FB10000000            	cmp	ebx, 16
   425 00000246 7CDE                    	jl	mem_char_loop
   426                                  
   427 00000248 B822000000              	mov	eax, '"'
   428 0000024D E80EFEFFFF              	call	print_char
   429 00000252 E81AFEFFFF              	call	print_nl
   430                                  
   431 00000257 81C610000000            	add	esi, 16
   432 0000025D 59                      	pop	ecx
   433 0000025E E287                    	loop	mem_outer_loop
   434                                  
   435 00000260 9D                      	popf
   436 00000261 61                      	popa
   437 00000262 C9                      	leave
   438 00000263 C20C00                  	ret	12
   439                                  
   440                                  ; function sub_dump_math
   441                                  ;   prints out state of math coprocessor without modifying the coprocessor
   442                                  ;   or regular processor state
   443                                  ; Parameters:
   444                                  ;  dump number - dword at [ebp+8]
   445                                  ; Local variables:
   446                                  ;   ebp-108 start of fsave buffer
   447                                  ;   ebp-116 temp double
   448                                  ; Notes: This procedure uses the Pascal convention.
   449                                  ;   fsave buffer structure:
   450                                  ;   ebp-108   control word
   451                                  ;   ebp-104   status word
   452                                  ;   ebp-100   tag word
   453                                  ;   ebp-80    ST0
   454                                  ;   ebp-70    ST1
   455                                  ;   ebp-60    ST2 ...
   456                                  ;   ebp-10    ST7
   457                                  ;
   458                                  sub_dump_math:
   459 00000266 C8740000                	enter	116,0
   460 0000026A 60                      	pusha
   461 0000026B 9C                      	pushf
   462                                  
   463 0000026C 9BDD7594                	fsave	[ebp-108]	; save coprocessor state to memory
   464 00000270 8B4598                  	mov	eax, [ebp-104]  ; status word
   465 00000273 25FFFF0000              	and	eax, 0FFFFh
   466 00000278 50                      	push	eax
   467 00000279 8B4594                  	mov	eax, [ebp-108]  ; control word
   468 0000027C 25FFFF0000              	and	eax, 0FFFFh
   469 00000281 50                      	push	eax
   470 00000282 FF7508                  	push	dword [ebp+8]
   471 00000285 68[1D010000]            	push	dword math_format1
   472 0000028A E8(00000000)            	call	_printf
   473 0000028F 81C410000000            	add	esp, 16
   474                                  ;
   475                                  ; rotate tag word so that tags in same order as numbers are
   476                                  ; in the stack
   477                                  ;
   478 00000295 668B4D98                	mov	cx, [ebp-104]	; ax = status word
   479 00000299 66C1E90B                	shr	cx, 11
   480 0000029D 6681E10700              	and	cx, 7           ; cl = physical state of number on stack top
   481 000002A2 668B5D9C                	mov	bx, [ebp-100]   ; bx = tag word
   482 000002A6 D0E1                    	shl     cl,1		; cl *= 2
   483 000002A8 66D3CB                  	ror	bx, cl		; move top of stack tag to lowest bits
   484                                  
   485 000002AB BF00000000              	mov	edi, 0		; edi = stack number of number
   486 000002B0 8D75B0                  	lea	esi, [ebp-80]   ; esi = address of ST0
   487 000002B3 B908000000              	mov	ecx, 8          ; ecx = loop counter
   488                                  tag_loop:
   489 000002B8 51                      	push	ecx
   490 000002B9 66B80300                	mov	ax, 3
   491 000002BD 6621D8                  	and	ax, bx		; ax = current tag
   492 000002C0 6609C0                  	or	ax, ax		; 00 -> valid number
   493 000002C3 7423                    	je	valid_st
   494 000002C5 663D0100                	cmp	ax, 1		; 01 -> zero
   495 000002C9 7419                    	je	zero_st
   496 000002CB 663D0200                	cmp	ax, 2		; 10 -> invalid number
   497 000002CF 7435                    	je	invalid_st
   498 000002D1 57                      	push	edi		; 11 -> empty
   499 000002D2 68[7F010000]            	push	dword empty_st_format
   500 000002D7 E8(00000000)            	call	_printf
   501 000002DC 81C408000000            	add	esp, 8
   502 000002E2 EB33                    	jmp	short cont_tag_loop
   503                                  zero_st:
   504 000002E4 D9EE                    	fldz
   505 000002E6 EB02                    	jmp	short print_real
   506                                  valid_st:
   507 000002E8 DB2E                    	fld	tword [esi]
   508                                  print_real:
   509 000002EA DD5D8C                  	fstp	qword [ebp-116]
   510 000002ED FF7590                  	push	dword [ebp-112]
   511 000002F0 FF758C                  	push	dword [ebp-116]
   512 000002F3 57                      	push	edi
   513 000002F4 68[60010000]            	push	dword valid_st_format
   514 000002F9 E8(00000000)            	call	_printf
   515 000002FE 81C410000000            	add	esp, 16
   516 00000304 EB11                    	jmp	short cont_tag_loop
   517                                  invalid_st:
   518 00000306 57                      	push	edi
   519 00000307 68[6D010000]            	push	dword invalid_st_format
   520 0000030C E8(00000000)            	call	_printf
   521 00000311 81C408000000            	add	esp, 8
   522                                  cont_tag_loop:
   523 00000317 66C1CB02                	ror	bx, 2		; mov next tag into lowest bits
   524 0000031B 47                      	inc	edi
   525 0000031C 81C60A000000            	add	esi, 10         ; mov to next number on stack
   526 00000322 59                      	pop	ecx
   527 00000323 E293                    	loop    tag_loop
   528                                  
   529 00000325 DD6594                  	frstor	[ebp-108]       ; restore coprocessor state
   530 00000328 9D                      	popf
   531 00000329 61                      	popa
   532 0000032A C9                      	leave
   533 0000032B C20400                  	ret	4
   534                                  
   535                                  
